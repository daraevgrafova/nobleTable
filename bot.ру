from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters, ConversationHandler
import os
from dotenv import load_dotenv
import logging
import nest_asyncio
nest_asyncio.apply()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(name)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)

# –°—Ç–∞–¥–∏–∏ –¥–∏–∞–ª–æ–≥–∞
NAME, GUESTS, DATE, TIME, CONFIRM = range(5)

# –ó–∞–≥—Ä—É–∑–∫–∞ .env
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")

# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ nobleTable! –ú—ã –≤—Å–µ–≥–¥–∞ —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å –≤ –Ω–∞—à–µ–º —É—é—Ç–Ω–æ–º —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ! ‚òï\n–ö–∞–∫ —è –º–æ–≥—É –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è?"
    )
    return NAME

# –ü–æ–ª—É—á–∞–µ–º –∏–º—è
async def name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["name"] = update.message.text
    reply_keyboard = [["1", "2", "3+"]]
    await update.message.reply_text(
        f"–û—á–µ–Ω—å –ø—Ä–∏—è—Ç–Ω–æ, {context.user_data['name']}! –°–∫–æ–ª—å–∫–æ –≥–æ—Å—Ç–µ–π –±—É–¥–µ—Ç?",
        reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True, resize_keyboard=True),
    )
    return GUESTS

# –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π
async def guests(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["guests"] = update.message.text
    await update.message.reply_text("–ù–∞ –∫–∞–∫—É—é –¥–∞—Ç—É –±—Ä–æ–Ω–∏—Ä—É–µ–º —Å—Ç–æ–ª–∏–∫? (–≤ —Ñ–æ—Ä–º–∞—Ç–µ 10.06)")
    return DATE

# –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É
async def date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["date"] = update.message.text
    await update.message.reply_text("–ù–∞ –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –±—Ä–æ–Ω–∏—Ä—É–µ–º? (–Ω–∞–ø—Ä–∏–º–µ—Ä 19:00)")
    return TIME

# –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è
async def time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["time"] = update.message.text
    text = (
        f"{context.user_data['name']}, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞: \n"
        f"{context.user_data['guests']} –≥–æ—Å—Ç—è(–µ–π), {context.user_data['date']} –≤ {context.user_data['time']}"
    )
    reply_keyboard = [["–î–∞", "–ù–µ—Ç"]]
    await update.message.reply_text(
        text,
        reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True, resize_keyboard=True),
    )
    return CONFIRM

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
async def confirm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text.lower() == "–¥–∞":
        await update.message.reply_text("–ë—Ä–æ–Ω—å –ø—Ä–∏–Ω—è—Ç–∞! üçΩÔ∏è", reply_markup=ReplyKeyboardRemove())
    else:
        await update.message.reply_text("–ë—Ä–æ–Ω—å –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

# –û—Ç–º–µ–Ω–∞
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞
async def main():
    application = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, name)],
            GUESTS: [MessageHandler(filters.TEXT & ~filters.COMMAND, guests)],
            DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, date)],
            TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, time)],
            CONFIRM: [MessageHandler(filters.TEXT & ~filters.COMMAND, confirm)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    application.add_handler(conv_handler)
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    await application.run_polling()

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
